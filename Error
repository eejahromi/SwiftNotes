-ErrorType protocol
// ErrorType go well with enums

-There are two ways to handle errors
ONE: handle them immediately
TWO: bubble them up to another level and handle later

// let's do monopoly error handling
enum RollingError: ErrorType {
  case Doubles
  case OutOfFunding
}

// example
func roll(firstDoce: Int,secondDice: Int) throws {
  let error: RollingError
  // doubles error happened
  error = .Doubles
  throw error
  
  // outOfFunding happened
  error = .OutOfFunding
  throw error
} 

// in the move func we are going to catch the errors
func move(firstDice: Int,secondDice: Int) -> String {
  do {
    try roll(first,secondDice: second)
    return "successful"
    } catch RollingError.Doubles {
      return "Doubles"
    } catch RollingError.OutOfFunding {
      return "Out of funding"
    } catch {
      return "unknown error"
    }
}

-If we have a struct that might fail when getting initialized, we should use a failable initializer so that we can handle
the failed initialization gracefully.

init?(name:String, address: String) {
  self.name = name
  guard(address.Characters.count > 0) else { return nil }
}




