-Protocol Oriented Programming

advantages vs subclassing:
-classes and subclassing only work with classes and we have to focus on implementation and deeper class hierarchies
-with protocols we only focus on contracts and interfaces and then we can couple and adapt classes, structs or enums using 
  those protocols or interfaces.

we know we can use extensions to add more functionality to any type in swift. including ones we haven't written ourselves.
//Protocol Extension Example
protocol TeamRecord {
  var wins: Int { get }
  var losses: Int { get }
  func winningPercentage() -> Double
}

extension TeamRecord {
  var gamesPlayed: Int {
    return wins + losses
  }
}

// in this case the compiler knows any type that conforms to TeamRecord will have all the members of TeamRecord
// also in TeamRecord protocol we have declarations only but in extension we have the implementation of the member

extension TeamRecord {
  func winningPercentage() -> Double {
    return Double(wins) / (Double(wins) + Double(losses)) // default implementation
  }
}

// winningPercentage not implemented in BasketBallRecord struct so it will use default implementation from extension
struct BasketballRecord: TeamRecord {
  var wins: Int
  var losses: Int
  let seasonLength = 82
}

// winningPercentage has a new implementation in SoccerRecord struct so it will take the new/custom implementation
struct SoccerRecord: TeamRecord {
  var wins: Int
  var losses: Int
  var ties: Int
  let seasonLength = 38
  
  func winningPercentage() -> Double {
    return Double(wins) / (Double(wins) + Double(losses) + Double(ties))
  }
}

-protocol extension dispatching
struct BaseballRecord: TeamRecord {
  var wins: Int
  var losses: Int
  let gamesPlayed: Int = 162
  
  func winningPercentage() -> Double {
    return // implementation
  }
}

let team1: TeamRecord = BaseballRecord(wins: 10, losses: 5) // defined as TeamRecord
team1.gamesPlayed // 15

let team2: BaseballRecord = BaseballRecord(wins: 10, losses: 5) // defined as BaseballRecord
team2.gamesPlayed // 162


-Type Constraint
protocol Tiable: {
  var ties: Int { get }
}

extension TeamRecord where self: Tiable {
  func winningPercentage() -> Double {
    return Double(wins) / (Double(wins) + Double(losses) + Double(ties))
  }
}
// creating default implementation for specific type combinations
struct HockeyRecord: TeamRecord, Tiable {
  var wins: Int
  var losses: Int
  var ties: Int
}

let hockeyTeam: TeamRecord = HockeyRecord(wins: 8,losses: 7,ties: 1) 
hockeyTeam.winningPercentage() // .500





