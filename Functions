func printMultipleOfFive(multiplier: Int) {
    print("\(multiplier) * 5 = \(multiplier * 5)")
}
printMultipleOfFive(6)


func printMultipleOf(multiplier:Int,andValue:Int){
    print("\(multiplier) * \(andValue) = \(multiplier * andValue)")
}
printMultipleOf(4, andValue: 8)

// with no external name
func printMultiplierOf(multiplier: Int, _ andValue:Int) {
    print("\(multiplier) * \(andValue) = \(multiplier * andValue)")
}
printMultipleOf(4, andValue: 2)

// multiple return types
func multiplyAndDivide(number: Int,by byValue:Int) -> (multiply: Int,divide: Int) {
    return (number * byValue, number / byValue)
}
let result2 = multiplyAndDivide(8, by: 7)
let multiply = result2.multiply
let divide = result2.divide

// function overloading
func getValue() -> Int {
    return 42
}

func getValue() -> String {
    return "index map"
}

in order to call a function that has been overloaded we have to specify the type of variable for the result of the func.
let value: String = getValue()

// pass by reference
func incrementAndPrint(inout value: Int) {
    value++
    print(value)
}

var value = 5
incrementAndPrint(&value)
print(value)

// Fibonacci - recursion
func fibonacci(number: Int) -> Int {
    if number == 0 {
        return 0
    }
    
    if number == 1 || number == 2{
        return 1
    }
    
    return fibonacci(number - 1) + fibonacci(number - 2)
}

fibonacci(7)

