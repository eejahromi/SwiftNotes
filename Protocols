-table view add screen example

protocol ItemDetailViewControllerDelegate: class{
    func itemDetailViewControllerDidCancel(controller: ItemDetailViewController)
    func itemDetailViewController(controller: ItemDetailViewController, didFinishAddingItem item: ChecklistItem)
    func itemDetailViewController(controller: ItemDetailViewController, didFinishEditingItem item: ChecklistItem)
}

// if we want to allow optionals for a method we have to provide two different versions
protocol Vehicle {
  func turn(direction: Direction)
  func turn() 
}

// we can also provide properties but we have to specify getter/setter for them cause we can't have implementations
protocol Vehicle{
    var weight: Int { get }
    var name: String { get set }
}

// we can have protocols that inherit from each other like classes
protocol WheeledVehicle: Vehicle {
 var numberOfWheels: Int { get }
 var wheelSize: Double { get set }
}

let motorCycle: WheeledVehicle // is-a wheeledVehicle , is-a Vehicle

// typealias in protocols
// using typealias we are declraing that there is a typealias and we are deffering to the adopter class to pick the exact type of variable
protocol WeightCalculatable {
    typealias weightType
    
    func calculateWeight() -> WeightType
}

class HeavyObjects: WeightCalculatable {
    typealias weightType = Int
    
    func calculateWeight() -> Int {
        return 100
    }
}

// extensions and protocols
class Bike {}

extension Bike: Wheeled {
    var numberOfWheels: Int {
        return 2
    }
}
// if you want to remove a protocol, you can just delete the specific extension (makes code cleaner and organized)
extension Bike: Vehicle {
    func accelerate() {
        // body
    }
    
    func stop() {
        // body
    }
}

// simple protocol implementation in class hierarchy
class Person { // first and last name }
class Student: Person { // grades and student ID }
class StudentAthlete: Student { // Eligible, sports }

// suppose we want to have a collection called roster but that roster also includes coaches
// we can do a class hierarchy like this
class Teacher: Person {  }
class Coach: Teacher { // role = "Coach" }
// but we can only add Coach with the first and last name to the roster collection because that's all StudentAthlete and Coachs have in common

// better solution is to use a protocol TeamMember to factor out the most common parts
protocol TeamMember { 
    var role: String { get }
    var firstName: String { get }
    func play()
}

// now we do
class Coach: Teacher, TeamMember { // role, play }
class StudentAthelete: Student, TeamMember { // role, play }
// now we can have a complete roster collection












