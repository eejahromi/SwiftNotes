-Optionals
// for situations where a value might be or not be present

// example
let simpleString = "0506"
let anotherString = "Hello World"

let number = Int(simpleString) // number is 0506
let anotherNumber = Int(anotherString) // anotherNumber will be nil because 'Hello World' cannot be converted to int

// Int() initializer might have the correct or incorrect value to be inserted into number variables
// so the initializer has been defined to return an optional value ? in case the value is nil

// if we want to have a variable or a constant that might be nil, we have to define it as optional

// if var/constant is defined without a default value, it automatically gets set to nil
let convertedNumber: Int? 
NOTE: In Swift nil is not the same nil as Objc. In Objc nil is a pointer to a non-existant object, in Swift it is the absence of a value of certain type.

-Force unwrapping:
// because force unwrapping could cause a runtime error, it should be used with care
if convertedNumber != nil {
  print("converted number: \(convertedNumber!)")
}

-Optional binding
if let newNumber = Int(somePotentialNumber) {
  print("\(somePotentialNumber)")
}

// Multiple optional bindings in a single statement
if let firstNumber = Int("45"), secondNumber = Int("22") where firstNumber < secondNumber {
  print("\(firstNumber) < \(secondNumber)")
}

-Implicitly unwrapped optionals
// with implicitly unwrapped optionals we define the optional with an ! instead of the normal ?
// this marks it that the optional will always have a value in the program

// normal optional
let possibleNumber: String?
let forcedString: String = possibleNumber!

// implicitly unwrapped optional
let possibleNumber: String!
let forcedString: String = possibleNumber // no need for exclamation point

NOTE: we can still use if-let for checking the value with implicitly unwrapped optionals
* Implicitly unwrapped optionals shouldn't be used with variables where they can become nil later on because of runtime error

