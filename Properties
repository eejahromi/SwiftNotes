Attributes in classes and structs that need to have memory allocated for them are called strored properties.
If attributes are calculated on the fly with no memory allocation, they're called computed peoperties.

struct TV{
  var height; Double
  var width: Double
  
  // computed property 
  // should be a var 
  // should have a return value and uses curly braces to contain the code
  var diagonal: Int{
    // calculate diagonal
    return Int(diagonalDimension)
  }
}

-getters and setters
// we cuold also explicitly use getters and setters 
var diagonal: Int{
  get{
    return Int(calculatedDiagonalDimension)
  }
  
  set{
    width = ...
    height = ...
  }
}

tv.diagonal = 70
let height = tv.height
let width = tv.width

-Type property
// static keyword: using it on the type itself rather than instances of that type

-singleton
class GameManager{
  static let defaultManager = GameManager()
  var gameScore = 0
  var saveState = 0
  private init(){}
}
// default constant type property of the instance of the class
// private initializer to make sure init() doesn't get called from outside

-property observers
// Note: willSet and didSet will only work on var and after initializations
// type properties inside observers still need to be called in the type itself (Level.highestLevel)
struct Level {
  static var highestLevel = 1
  let id: Int
  var boss: String
  var unlocked: Bool {
    didSet{
      if unlocked && id > Level.highestLevel {
        Level.highestLevel = id
      }
    }
  }
}

-Limiting variables with observers
class Game{
  static let maxScore = 50
  var score = 0{
    didSet{
      if score > Game.maxScore{
        print("Can't go higher")
        score = oldScore
      }
    }
  }
}

-lazy variables
// lazy stored property, must be var
// won't get calculated until called on for use, only calculates the first time
class Circle{
  lazy var pie = {
    return calcPie
  }
  
  var circumference:Double{
    return pie * radius * radius
  }
}




