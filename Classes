// structs vs classes

    structues
    implicit copying of values
    data is immutable
    useful for representing values
    declared on stack

    Classes
    implicit sharing of objects
    data is mutable
    useful for representing "things"
    declared on heap

// simple class Person
class Person{
    var firstName: String
    var lastName: String
 
    init(firstName: String,lastName:String){
        self.firstName = firstName
        self.lastName = lastName
    }
    
    func fullName() ->String {
        return "\(firstName) \(lastName)"
    }
}

// all stored variables must have initial values unless they are optionals
let john = Person(firstName: "John", lastName: "Smith")
john.fullName()

// checking identity of the object
let secondJohn = john
secondJohn === john // true

let someOtherJohn = Person(firstName: "John", lastName: "Smith")
someOtherJohn === john // false

// access controls
// public, private, internal: entities are to code inside the module defined in but not to code in a module that imports the module it is defined in

internal class InternalClass{
    private func sayHi(){
        print("Hi")
    }
    
    // internal by default
    func speak(){
        sayHi()
    }
}

////////////////////////////////////////////////////////////////////////////
// quick notes on inheritance
// preventing inheritance and overriding methods
// final class Student: Person { }
// final func printGrades() {}

// super
// gotta call super in initializer after subclassing - normally at the end
init() {
    // instance variables and constants
    super.init()
    // other initialization code and method calls
}



// Inheritance
class Person{
    var firstName: String
    var lastName: String
    
    init(firstName:String,lastName:String){
        self.firstName = firstName
        self.lastName = lastName
    }
    
}

class Student: Person {
    var grades: [Grade] = []
    
    func recordGrade(grade: Grade){
        grades.append(grade)
    }
}

var john = Student(firstName: "John", lastName: "Smith")

class StudetAthelete: Student {
    var failedClasses: [Grade] = []
    
    override func recordGrade(grade: Grade) {
        super.recordGrade(grade)
        
        if grade.letter == "F" {
            failedClasses.append(grade)
        }
    }
    
    func athleteIsEligible() -> Bool {
        return failedClasses.count < 3
    }
}

