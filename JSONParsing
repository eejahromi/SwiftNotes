
-JSON parsing in is a little tricky because of optionals

// Sample JSON
[{
  "name":"John Smith",
  "age": 30,
  "city":"New York",
  "occupation":"Software Engineer"
 },{
  "name":"Jane Smith",
  "age": 28,
  "city":"New Jersey",
  "occupation":nil
 },...
]

// we can use failable initializers in order to comply with type safety, especially when iterating over arrays
struct Person{
  var name: String
  var age: UInt
  var city: String
  var occupation: String
  
  init?(entry: Dictionary) {
    name = entry["name"] as! String
    age = entry["age"] as! UInt
    city = entry["city"] as! String
    occupation = entry["occupation"] as! String
  }
}

// assume "jsonArray" has been constructed of our JSON file

array.forEach{ (entry) in Void
  guard let person = Person(entry:entry) as! Person else {
    print("failed to initialize")
  }
}

// swift 4 parsing

struct Soda : Codable {
      // ...
      enum CodingKeys : String, CodingKey {
          case name
          case company = "company_name"
          case flavor
    }
}


let encoder = JSONEncoder()
let data = try! encoder.encode(beer)
print(String(data: data, encoding: .utf8)!)


